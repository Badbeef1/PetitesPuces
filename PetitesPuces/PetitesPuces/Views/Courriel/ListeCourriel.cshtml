@model PagedList.IPagedList<PetitesPuces.ViewModels.MessageAfficheVM>
@using PagedList.Mvc;

<script type="text/javascript">
    function selection() {
        var tabCb = new Array();
        document.querySelectorAll('input[type=checkbox]:checked').forEach(list => {
            tabCb.push(list.id.substring(2));
        });

        document.getElementById('ElementSelectionner').value = tabCb;

        //Affiche les options selon le nombre de message selectionner
        var nbElement = tabCb.length;

        console.log("Resultat: " + nbElement);

        var arrAucun = document.querySelectorAll('.aucun-Select');
        var arrUn = document.querySelectorAll('.un-Select');
        var arrUnOuPlusieurs = document.querySelectorAll('.unOuPlus-Select');

        if (nbElement == 0) {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });
        }
        else if (nbElement == 1) {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });
        }
        else {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });
        }
    }

    function uneTacheSansSelection(element) {
        var strElement = element.value;

        var tabChampsModification = strElement.split("_");

        var action = tabChampsModification[0];
        var sujet = tabChampsModification[1];

        document.getElementById("ElementSelectionner").value = "des_" + sujet;
        document.getElementById("uneAction").value = action;

        document.getElementsByTagName("form")[0].submit();
    }

    function uneTache(element) {
        var noMessage = document.getElementById("ElementSelectionner").value.split('_')[1];
        var nomAction = document.getElementById("uneAction").value = element.value;

        location.href ="@Url.Action("Index/NouveauMessage", "Courriel")" + "?message=" + noMessage + "&uneAction=" + nomAction;
        //document.getElementsByTagName("form")[0].submit();
    }

    function desTaches(element) {
        document.getElementById("uneAction").value = element.value;

        document.getElementsByTagName("form")[0].submit();
    }

    function desTachesSurTous(element) {
        var tabCb = new Array();
        document.querySelectorAll('input[type=checkbox]').forEach(list => {
            tabCb.push(list.id.substring(2));
        });

        if (tabCb.length > 0) {
            document.getElementById('ElementSelectionner').value = tabCb;
            document.getElementById("uneAction").value = element.value;

            if (confirm("Êtes-vous sûr de vouloir appliquer l'action sur les " + tabCb.length + " messages?")) {
                document.getElementsByTagName("form")[0].submit();
            }
        } 
    }
</script>

@{
    const string strBoiteReception = "Reception";
    const string strAffichageMessage = "AffichageMessage";
    const string strBoiteSupprime = "SupprimePartiel";
    const string strSupprimeDefinitivement = "SupprimeTotal";
    const string strBrouillon = "Brouillon";
    const string strNouveauMessage = "NouveauMessage";
    const string strEnvoye = "Envoyer";

    const string triDate = "date";
    const string triExpediteur = "expediteur";
    const string triDestinataire = "destinataire";
    const string triDestinataireExpediteur = "destinataireExpediteur";
}

@using (Html.BeginForm())
{
<nav class=" navbar bg-light">
    @Html.Hidden("ElementSelectionner")
    @Html.Hidden("uneAction")
    @Html.Hidden("pageAncienne", ViewBag.LaPage as string)
    @Html.Hidden("triActuel")
    <ul class="navbar-nav navbar-expand bd-navbar">
        <li class="nav-item">
            <a href="@Url.Action("Index/NouveauMessage")" class="nav-link"><i class="fas fa-plus"></i> Nouveau Message</a>
        </li>
        @if (ViewBag.LaPage == strBoiteReception)
        {
            <li class="nav-item aucun-Select">
                <button type="button" class="btn btn-link" value="lu" onclick="desTachesSurTous(this)"><i class="far fa-envelope-open"></i> Marquer tous comme lu</button>
            </li>
        }
        <li class="nav-item un-Select">
            <button type="button" class="btn btn-link" value="rep" onclick="uneTache(this)"><i class="fas fa-reply"></i> Répondre</button>
        </li>
        <li class="nav-item un-Select">
            <button type="button" class="btn btn-link" value="trans" onclick="uneTache(this)"><i class="fas fa-reply-all"></i> Transférer</button>
        </li>

        @if (ViewBag.LaPage != strBoiteSupprime && ViewBag.LaPage != strSupprimeDefinitivement)
        {
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="supp" onclick="desTaches(this)"><i class="fa fa-trash-alt"></i> Supprimer</button>
            </li>
        }


        @if (ViewBag.LaPage == strBoiteReception)
        {
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="lu" onclick="desTaches(this)"><i class="far fa-envelope-open"></i> Marquer comme lu</button>
            </li>

            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="nonlu" onclick="desTaches(this)"><i class="far fa-envelope"></i> Marquer comme non lu</button>
            </li>
        }
        @if (ViewBag.LaPage == strBoiteSupprime)
        {
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="suppdef" onclick="desTaches(this)"><i class="fa fa-trash-alt"></i> Supprimer</button><!--Définitivement-->
            </li>
        }

        @if (ViewBag.LaPage != strBoiteReception && ViewBag.LaPage != strSupprimeDefinitivement && ViewBag.LaPage != strBoiteSupprime)
        {
            <li class="nav-item aucun-Select">
                <button type="button" class="btn btn-link aucun-Select" value="supp" onclick="desTachesSurTous(this)"><i class="fa fa-trash-alt"></i> Vider le dossier</button>
            </li>
        }
        @if (ViewBag.LaPage == strBoiteSupprime)
        {
            <li class="nav-item aucun-Select">
                <button type="button" class="btn btn-link aucun-Select" value="suppdef" onclick="desTachesSurTous(this)"><i class="fa fa-trash-alt"></i> Vider le dossier</button>
            </li>
        }
        @if (ViewBag.LaPage == strBoiteSupprime)
        {
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="restau" onclick="desTaches(this)"><i class="fas fa-undo"></i> Restaurer</button>
            </li>
        }
    </ul>
    <!--Tri-->

    @if (ViewBag.LaPage == strBrouillon || ViewBag.LaPage == strEnvoye || ViewBag.LaPage == strBoiteReception || ViewBag.LaPage == strBoiteSupprime)
    {
    <div class="ml-auto">
        <label>Trié par: </label>

        @{
            string leTriActif = ViewData["triActuel"] as string ?? "";
            string strClassetri = "btn btn-outline-primary";
            if (leTriActif.Contains(triDate))
            {
                strClassetri += " focus";
                <button id="btnTriDate" type="button" class="@strClassetri" value="@leTriActif" onclick="$.gestionTri(this)">
                    Date
                    @if (leTriActif.Substring(0, 1) == "!")
                    {
                        <i class="fas fa-sort-amount-down"></i>
                    }
                    else
                    {
                        <i class="fas fa-sort-amount-up"></i>
                    }
                </button>
            }
            else
            {
                <button id="btnTriDate" type="button" class="@strClassetri" value="@triDate" onclick="$.gestionTri(this)">Date <i class="fas fa-sort-amount-up"></i></button>
            }

            strClassetri = "btn btn-outline-primary";
            if (ViewBag.LaPage == strBrouillon)
            {
                if (leTriActif.Contains(triDestinataire))
                {
                    strClassetri += " focus";
                    <button id="btnTriDest" type="button" class="@strClassetri" value="@leTriActif" onclick="$.gestionTri(this)">
                        Destinataire
                        @if (leTriActif.Substring(0, 1) == "!")
                        {
                            <i class="fas fa-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="fas fa-sort-alpha-up"></i>
                        }
                    </button>
                }
                else
                {
                    <button id="btnTriDest" type="button" class="@strClassetri" value="@triDestinataire" onclick="$.gestionTri(this)">Destinataire <i class="fas fa-sort-alpha-up"></i></button>
                }
            }
            else if (ViewBag.LaPage == strBoiteSupprime || ViewBag.LaPage == strEnvoye)
            {
                if (leTriActif.Contains(triDestinataireExpediteur))
                {
                    strClassetri += " focus";
                    <button id="btnTriDestExp" type="button" class="@strClassetri" value="@leTriActif" onclick="$.gestionTri(this)">
                        Destinataire/Expéditeur
                        @if (leTriActif.Substring(0, 1) == "!")
                        {
                            <i class="fas fa-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="fas fa-sort-alpha-up"></i>
                        }
                    </button>
                }
                else
                {
                    <button id="btnTriDestExp" type="button" class="@strClassetri" value="@triDestinataireExpediteur" onclick="$.gestionTri(this)">Destinataire/Expéditeur <i class="fas fa-sort-alpha-up"></i></button>
                }
            }
            else
            {
                if (leTriActif.Contains(triExpediteur))
                {
                    strClassetri += " focus";
                    <button id="btnTriExp" type="button" class="@strClassetri" value="@leTriActif" onclick="$.gestionTri(this)">
                        Expéditeur
                        @if (leTriActif.Substring(0, 1) == "!")
                        {
                            <i class="fas fa-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="fas fa-sort-alpha-up"></i>
                        }
                    </button>
                }
                else
                {
                    <button id="btnTriExp" type="button" class="@strClassetri" value="@triExpediteur" onclick="$.gestionTri(this)">Expéditeur <i class="fas fa-sort-alpha-up"></i></button>
                }
            }
        }

    </div>
    }

</nav>

    <div class="d-flex flex-column">

        @foreach (var contenu in Model)
        {
            string strMessDebut = new string(contenu.Message.DescMsg?.Take(60 - (contenu.Message.objet?.Count() ?? 0)).ToArray());
            string strDateEnvioFormat = contenu.Message.dateEnvoi.HasValue ? contenu.Message.dateEnvoi.Value.ToString("yyyy-MM-dd") : "";

            string strActionAffichage = "";
            if (ViewBag.LaPage == strBrouillon)
            {
                strActionAffichage = Url.Action("Index/NouveauMessage", new { @message = contenu?.Message?.NoMsg });
            }
            else
            {
                if (contenu.Destinataire is null)
                {
                    strActionAffichage = Url.Action("Index/AffichageMessage", new { @message = contenu.Message.NoMsg, @leType = "Message"});
                }
                else
                {
                    strActionAffichage = Url.Action("Index/AffichageMessage", new { @message = contenu.Message.NoMsg, @leType = "Destinataire" });
                }
            }

            string strMessageEtat = contenu.Destinataire != null ? (contenu.Destinataire.EtatLu == 0 ? "font-weight: bold;" : "" ): "";

            <div class="row p-2 sMessListe" style="cursor:pointer;@strMessageEtat">
                <div class="col-auto">
                    @{ 
                        //des => Destinataires mes => Messages
                        string strAttribut = contenu.Destinataire is null ? "mes_" : "des_";
                    }

                    @Html.CheckBox("cb" + strAttribut + contenu.Message.NoMsg, false, new { onchange = "selection();" })
                </div>
                <div class="col-3" onclick="location.href='@strActionAffichage'">
                    @Html.DisplayFor(x => contenu.StrNomAffichageExpediteur)
                </div>
                <div class="col-1 sActionMessageListe">
                    @{
                        var nom = "suppdef_" + contenu.Message.NoMsg;
                        if (ViewBag.LaPage != strBoiteSupprime)
                        {
                            nom = "supp_" + contenu.Message.NoMsg;
                        }
                    }
                    <button type="button" title="Supprimer" onclick="uneTacheSansSelection(this)" value="@nom"><i class="fa fa-trash-alt"></i></button>
                    @if (contenu.Destinataire != null)
                    {
                        if (contenu.Destinataire.EtatLu == 0)
                        {
                            nom = "lu_" + contenu.Message.NoMsg;
                            <button type="button" title="Marquer comme lu" value="@nom" onclick="uneTacheSansSelection(this)"><i class="far fa-envelope-open"></i></button>
                        }
                        else
                        {
                            nom = "nonlu_" + contenu.Message.NoMsg;
                            <button type="button" title="Marquer comme non lu" value="@nom" onclick="uneTacheSansSelection(this)"><i class="far fa-envelope"></i></button>
                        }
                    }
                </div>
                <div class="col-1" onclick="location.href='@strActionAffichage'">
                    @if (contenu.Message.FichierJoint != null)
                    {
                        <span class="fas fa-paperclip"></span>
                    }
                </div>
                <div class="col-4" onclick="location.href='@strActionAffichage'">
                    <span class="">@Html.DisplayFor(x => contenu.Message.objet)</span>
                    - 
                    <span class="font-weight-light text-muted">@Html.DisplayFor(x => strMessDebut)</span>
</div>
                <div class="col-2" onclick="location.href='@strActionAffichage'">
                    @Html.DisplayFor(x => strDateEnvioFormat)
                </div>
            </div>
        }
    </div>
}
@Html.PagedListPager(Model, page => Url.Action("Index/" + ViewBag.LaPage as string , new { page , triActuel = ViewData["triActuel"] as string, pageAncienne = ViewBag.LaPage as string}))


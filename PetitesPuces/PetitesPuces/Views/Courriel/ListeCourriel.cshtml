@model PagedList.IPagedList<PetitesPuces.ViewModels.MessageAfficheVM>
@using PagedList.Mvc;

<script type="text/javascript">
    function selection() {
        var tabCb = new Array();
        document.querySelectorAll('input[type=checkbox]:checked').forEach(list => {
            tabCb.push(list.id.substring(2));
        });

        document.getElementById('ElementSelectionner').value = tabCb;

        //Affiche les options selon le nombre de message selectionner
        var nbElement = tabCb.length;

        console.log("Resultat: " + nbElement);

        var arrAucun = document.querySelectorAll('.aucun-Select');
        var arrUn = document.querySelectorAll('.un-Select');
        var arrUnOuPlusieurs = document.querySelectorAll('.unOuPlus-Select');


        if (nbElement == 0) {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });
        }
        else if (nbElement == 1) {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });
        }
        else {
            arrAucun.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUn.forEach(element => {
                element.setAttribute('style', 'display: none;');
            });

            arrUnOuPlusieurs.forEach(element => {
                element.setAttribute('style', 'display: inline-block;');
            });
        }

    }

    function uneTache(element) {
        var strElement = element.value;

        var tabChampsModification = strElement.split("_");

        var action = tabChampsModification[0];
        var sujet = tabChampsModification[1];

        document.getElementById("ElementSelectionner").value = sujet;
        document.getElementById("uneAction").value = action;

        document.getElementsByTagName("form")[0].submit();
    }

    function desTaches(element) {
        document.getElementById("uneAction").value = element.value;

        document.getElementsByTagName("form")[0].submit();
    }

    function desTachesSurTous(element) {
        var tabCb = new Array();
        document.querySelectorAll('input[type=checkbox]').forEach(list => {
            tabCb.push(list.id.substring(2));
        });

        document.getElementById('ElementSelectionner').value = tabCb;
        document.getElementById("uneAction").value = element.value;

        if (confirm("Êtes-vous sûr de vouloir appliquer l'action sur les " + tabCb.length + " messages?")) {
            document.getElementsByTagName("form")[0].submit();
        }

    }

</script>

@{
    const string strBoiteReception = "Reception";
    const string strAffichageMessage = "AffichageMessage";
    const string strBoiteSupprime = "SupprimePartiel";
    const string strSupprimeDefinitivement = "SupprimeTotal";
    const string strBrouillon = "Brouillon";
    const string strNouveauMessage = "NouveauMessage";
    const string strEnvoye = "Envoyer";
}


@using (Html.BeginForm())
{
    <nav class=" navbar bg-light">
        @Html.Hidden("ElementSelectionner")
        @Html.Hidden("uneAction")
        <ul class="navbar-nav navbar-expand bd-navbar">
            <li class="nav-item">
                <a href="@Url.Action("Index/NouveauMessage")" class="nav-link"><i class="fas fa-plus"></i> Nouveau Message</a>
            </li>
            <li class="nav-item aucun-Select">
                <button type="button" class="btn btn-link" value="lu" onclick="desTachesSurTous(this)"><i class="far fa-envelope-open"></i> Marquer tous comme lu</button>
            </li>
            <li class="nav-item un-Select">
                <a href="#" class="btn btn-link"><i class="fas fa-reply-all"></i> Répondre</a>
            </li>
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="supp" onclick="desTaches(this)"><i class="fa fa-trash-alt"></i> Supprimer</button>
            </li>
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="lu" onclick="desTaches(this)"><i class="far fa-envelope-open"></i> Marquer comme lu</button>
            </li>
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="nonlu" onclick="desTaches(this)"><i class="far fa-envelope"></i> Marquer comme non lu</button>
            </li>
            @if (ViewBag.LaPage == strSupprimeDefinitivement)
            {
            <li class="nav-item unOuPlus-Select">
                <button type="button" class="btn btn-link" value="suppdef" onclick="desTaches(this)"><i class="fa fa-trash-alt"> Supprimer</i></button><!--Définitivement-->
            </li>
            }

            @if (ViewBag.LaPage != strBoiteReception && ViewBag.LaPage != strSupprimeDefinitivement)
            {
                <li class="nav-item aucun-Select">
                    <button type="button" class="btn btn-link aucun-Select" value="supp"><i class="fa fa-trash-alt"></i> Vider le dossier</button>
                </li>
            }
            @if (ViewBag.LaPage == strSupprimeDefinitivement)
            {
                <li class="nav-item aucun-Select">
                    <button type="button" class="btn btn-link aucun-Select" value="suppdef"><i class="fa fa-trash-alt"></i> Vider le dossier</button>
                </li>
            }
            @if (ViewBag.LaPage == strBoiteSupprime)
            {
                <li class="nav-item unOuPlus-Select">
                    <button type="button" class="btn btn-link" value="restau" onclick="desTaches(this)"><i class="fas fa-undo"></i> Restaurer</button>
                </li>
            }

        </ul>
    </nav>

    <div class="d-flex flex-column">

        @foreach (var contenu in Model)
        {
            string strMessDebut = new string(contenu.Message.DescMsg.Take(60 - contenu.Message.objet.Length).ToArray());
            string strDateEnvioFormat = contenu.Message.dateEnvoi.HasValue ? contenu.Message.dateEnvoi.Value.ToString("dd MMMM yyyy") : "";

            string strActionAffichage = Url.Action("Index/AffichageMessage", new { @message = contenu.Message.NoMsg });

            string strMessageEtat = contenu.Destinataire != null ? (contenu.Destinataire.EtatLu == 0 ? "font-weight: bold;" : "" ): "";

            <div class="row p-2 sMessListe" style="cursor:pointer;@strMessageEtat">
                <div class="col-auto">
                    @Html.CheckBox("cb" + contenu.Message.NoMsg, false, new { onchange = "selection();" })
                </div>
                <div class="col-3" onclick="location.href='@strActionAffichage'">
                    @Html.DisplayFor(x => contenu.StrNomAffichage)
                </div>

                <div class="col-1 sActionMessageListe">
                    @{
                        var nom = "supp_" + contenu.Message.NoMsg;
                    }
                    <button type="button" title="Supprimer" onclick="uneTache(this)" value="@nom"><i class="fa fa-trash-alt"></i></button>
                    @if (contenu.Destinataire != null)
                    {
                        if (contenu.Destinataire.EtatLu == 0)
                        {
                            nom = "lu_" + contenu.Message.NoMsg;
                            <button type="button" title="Marquer comme lu" value="@nom" onclick="uneTache(this)"><i class="far fa-envelope-open"></i></button>
                        }
                        else
                        {
                            nom = "nonlu_" + contenu.Message.NoMsg;
                            <button type="button" title="Marquer comme non lu" value="@nom" onclick="uneTache(this)"><i class="far fa-envelope"></i></button>
                        }
                    }
                </div>
                <div class="col-1" onclick="location.href='@strActionAffichage'">
                    @if (contenu.Message.FichierJoint != null)
                    {
                        <span class="fas fa-paperclip"></span>
                    }
                </div>
                <div class="col-4" onclick="location.href='@strActionAffichage'">
                    @Html.DisplayFor(x => contenu.Message.objet)
                    @Html.DisplayFor(x => strMessDebut)
                </div>
                <div class="col-2" onclick="location.href='@strActionAffichage'">
                    @Html.DisplayFor(x => strDateEnvioFormat)
                </div>
            </div>


        }
    </div>
}


@Html.PagedListPager(Model, page => Url.Action("Index/Reception", new { @page = 1 }))
